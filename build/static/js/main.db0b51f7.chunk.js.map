{"version":3,"sources":["Views/Login/questionMark.jpg","Views/Register/addProfilePic.png","Helpers/storage.ts","Views/Login/Login.tsx","Views/Register/Register.tsx","Helpers/validator.ts","Views/List/List.tsx","Navigator.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","getUsers","userStack","localStorage","getItem","JSON","parse","Startscreen","props","state","email","users","storage","lastUser","handleChange","event","setState","target","value","bind","handleSubmit","preventDefault","match","this","console","log","forEach","element","changeView","image","pop","imagePreviewUrl","src","alt","height","width","name","questionMark","className","onSubmit","type","placeholder","onChange","React","Component","RegisterScreen","picture","File","phone","address","birthdate","handleImageChange","reader","FileReader","files","file","onloadend","result","readAsDataURL","alert","user","concat","push","setItem","stringify","imagePreview","addProfilePic","pattern","List","handleDelete","topUser","userList","map","style","border","color","backgroundColor","display","flexDirection","alignItems","Navigator","view","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,iQCE9BC,EAAW,WACpB,IAAIC,EAAYC,aAAaC,QAAQ,aACrC,OAAIF,EACOG,KAAKC,MAAMJ,GAEX,MCgEAK,E,YApDX,WAAYC,GAAgB,IAAD,8BACvB,4CAAMA,KALVC,MAAgB,CAAEC,MAAO,IAIE,EAH3BC,MAAgBC,IAGW,EAF3BC,SAAmB,GAEQ,EAM3BC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAAEN,MAAOK,EAAME,OAAOC,SALpC,EAAKJ,aAAe,EAAKA,aAAaK,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAHG,E,0EAUdJ,GAA0C,IAAD,OAClDA,EAAMM,iBACN,IAAIC,GAAQ,EACRC,KAAKZ,QAAQa,QAAQC,IAAI,UAAWF,KAAKZ,OACzCY,KAAKZ,MAAMe,SAAQ,SAAAC,GAAYH,QAAQC,IAAI,SAAUE,EAAS,YAAa,EAAKlB,OACxEkB,EAAQjB,QAAU,EAAKD,MAAMC,QAC7BY,GAAQ,OAIhBA,EACAC,KAAKf,MAAMoB,WAAW,QAEtBL,KAAKf,MAAMoB,WAAW,c,+BAK1B,IACIC,EADAhB,EDvBW,WACnB,IAAIX,EAAoBD,IACxB,OAAIC,EACOA,EAAU4B,MAEV,KCkBQlB,GAYf,OATIiB,EADAhB,GAAYA,EAASkB,gBAEjB,6BACI,yBAAKC,IAAKnB,EAASkB,gBAAiBE,IAAI,YAAYC,OAAO,MAAMC,MAAM,QACvE,2BAAItB,EAASuB,OAIZ,yBAAKJ,IAAKK,IAAcJ,IAAI,OAAOC,OAAO,MAAMC,MAAM,QAG/D,yBAAKG,UAAU,SACVT,EACD,0BAAMS,UAAU,OAAOC,SAAUhB,KAAKH,cAClC,2BAAOoB,KAAK,OAAOJ,KAAK,QAAQK,YAAY,gBAAgBvB,MAAOK,KAAKd,MAAMC,MAAOgC,SAAUnB,KAAKT,eACpG,2BAAO0B,KAAK,SAAStB,MAAM,iB,GAlDrByB,IAAMC,W,uCCoFjBC,E,YAnEX,WAAYrC,GAAgB,IAAD,8BACvB,4CAAMA,KAXVC,MAAgB,CACZqC,QAAS,IAAIC,KAAK,GAAI,YACtBX,KAAM,GACN1B,MAAO,GACPsC,MAAO,GACPC,QAAS,GACTC,UAAW,GACXnB,gBAAiB,IAGM,EAO3BoB,kBAAoB,SAACpC,GACjBA,EAAMM,iBACN,IAAI+B,EAAS,IAAIC,WAEjB,GAAItC,EAAME,OAAOqC,OAASvC,EAAME,OAAOqC,MAAM,GAAI,CAC7C,IAAIC,EAAOxC,EAAME,OAAOqC,MAAM,GAE9BF,EAAOI,UAAY,WACf,EAAKxC,SAAL,eACO,EAAKP,MADZ,CAEIqC,QAASS,EACTxB,gBAAiBqB,EAAOK,WAGhCL,EAAOM,cAAcH,QAErBI,MAAM,yCAvBa,EA2B3B7C,aAAe,SAACC,GACZ,EAAKC,SAAL,eACO,EAAKP,MADZ,eAEKM,EAAME,OAAOmB,KAAOrB,EAAME,OAAOC,UA5BtC,EAAKJ,aAAe,EAAKA,aAAaK,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKgC,kBAAoB,EAAKA,kBAAkBhC,KAAvB,gBAJF,E,0EAkCdJ,GC9DgB,IAAC6C,ED+D1B7C,EAAMM,iBC7DgB,cAFIuC,EDgEMrC,KAAKd,OC9DhCqC,QAAQV,MAEZwB,EAAKxB,MAELwB,EAAKlD,OAELkD,EAAKZ,OAELY,EAAKV,YHFU,SAACU,GACrB,IAAI1D,EAAoB,GACpBD,MACAC,EAAYA,EAAU2D,OAAO5D,MAE7BC,GACAA,EAAU4D,KAAKF,GACfzD,aAAa4D,QAAQ,YAAa1D,KAAK2D,UAAU9D,KAEjDC,aAAa4D,QAAQ,YAAa1D,KAAK2D,UAAUJ,IEkD7ChD,CAAiBW,KAAKd,OACtBc,KAAKf,MAAMoB,WAAW,SAHtB+B,MAAM,gC,+BAOV,IAAIM,EAMJ,OAJIA,EADA1C,KAAKd,MAAMsB,gBACK,yBAAKC,IAAKT,KAAKd,MAAMsB,gBAAiBE,IAAI,WAAWC,OAAO,MAAMC,MAAM,QAExE,yBAAKH,IAAKkC,IAAejC,IAAI,OAAOC,OAAO,MAAMC,MAAM,QAGvE,yBAAKG,UAAU,YACV2B,EACD,0BAAM3B,UAAU,OAAOC,SAAUhB,KAAKH,cAClC,2BAAOoB,KAAK,OAAOE,SAAUnB,KAAK4B,oBAClC,2BAAOX,KAAK,OAAOJ,KAAK,OAAOK,YAAY,OAAOvB,MAAOK,KAAKd,MAAM2B,KAAMM,SAAUnB,KAAKT,eACzF,2BAAO0B,KAAK,OAAOJ,KAAK,QAAQK,YAAY,gBAAgBvB,MAAOK,KAAKd,MAAMC,MAAOgC,SAAUnB,KAAKT,eACpG,2BAAO0B,KAAK,OAAO2B,QAAQ,OAAM/B,KAAK,QAAQK,YAAY,eAAevB,MAAOK,KAAKd,MAAMuC,MAAON,SAAUnB,KAAKT,eACjH,2BAAO0B,KAAK,OAAOJ,KAAK,UAAUK,YAAY,UAAUvB,MAAOK,KAAKd,MAAMwC,QAASP,SAAUnB,KAAKT,eAClG,2BAAO0B,KAAK,OAAOJ,KAAK,YAAYK,YAAY,gBAAgBvB,MAAOK,KAAKd,MAAMyC,UAAWR,SAAUnB,KAAKT,eAC5G,2BAAO0B,KAAK,SAAStB,MAAM,iB,GAvElByB,IAAMC,WEkCpBwB,G,kBAxCX,WAAY5D,GAAgB,IAAD,8BACvB,4CAAMA,KAHVN,UAAoBU,IAEO,EAM3BE,aAAe,SAACC,KAJZ,EAAKD,aAAe,EAAKA,aAAaK,KAAlB,gBACpB,EAAKkD,aAAe,EAAKA,aAAalD,KAAlB,gBAHG,E,0EASdJ,GACTA,EAAMM,mB,+BAGN,IAAIiD,EAAgB/C,KAAKrB,UAAU,GAC/BqE,EAAkB,GAStB,OARAhD,KAAKrB,UAAUsE,KAAI,SAACZ,GAChBW,EAAST,KACL,yBAAKW,MAAO,CAACC,OAAQ,kBAAmBvC,MAAO,QAC3C,2BAAIyB,EAAKxB,MACT,yBAAKJ,IAAK4B,EAAK7B,gBAAiBE,IAAI,YAAYC,OAAO,MAAMC,MAAM,aAK3E,yBAAKG,UAAU,QACX,yBAAKN,IAAKsC,EAAQvC,gBAAiBE,IAAI,WAAWC,OAAO,MAAMC,MAAM,QACrE,2BAAImC,EAAQ5D,OACZ,2BAAI4D,EAAQtB,OACZ,2BAAIsB,EAAQrB,SACZ,2BAAIqB,EAAQpB,WAEZ,wBAAIuB,MAAO,CAACE,MAAO,QAASC,gBAAiB,QAAS1C,OAAQ,KAC9D,yBAAKuC,MAAO,CAACI,QAAS,OAAQC,cAAe,SAAUC,WAAY,WAC9DR,Q,GApCF5B,IAAMC,YC2BVoC,E,2MA1BXvE,MAAgB,CAAEwE,KAAM,S,EAExBrD,WAAa,SAACqD,GACV,EAAKjE,SAAS,CACViE,KAAMA,K,wEAKV,OAAQ1D,KAAKd,MAAMwE,MACf,IAAK,QACD,OACI,kBAAC,EAAD,CAAarD,WAAYL,KAAKK,WAAWT,KAAKI,QAEtD,IAAK,WACD,OACI,kBAAC,EAAD,CAAgBK,WAAYL,KAAKK,WAAWT,KAAKI,QAEzD,IAAK,OACD,OACI,kBAAC,EAAD,CAAYK,WAAYL,KAAKK,WAAWT,KAAKI,a,GArBzCoB,IAAMC,WCCVsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/D,MACvB,2DCZNgE,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SDqIjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.db0b51f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/questionMark.dd879673.jpg\";","module.exports = __webpack_public_path__ + \"static/media/addProfilePic.e51f4618.png\";","import User from '../Types/User'\r\n\r\nexport const getUsers = () => {\r\n    let userStack = localStorage.getItem('userStack');\r\n    if (userStack) {\r\n        return JSON.parse(userStack)\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const pushUser = (user: User) => {\r\n    let userStack: User[] = []\r\n    if (getUsers()) {\r\n        userStack = userStack.concat(getUsers())\r\n    }\r\n    if (userStack) {\r\n        userStack.push(user);\r\n        localStorage.setItem('userStack', JSON.stringify(userStack))\r\n    } else {\r\n        localStorage.setItem('userStack', JSON.stringify(user))\r\n    }\r\n}\r\n\r\nexport const popUser = () => {\r\n    let userStack: User[] = getUsers();\r\n    if (userStack) {\r\n        return userStack.pop();\r\n    } else {\r\n        return null;\r\n    }\r\n}","import React from 'react';\r\nimport './Login.css';\r\nimport questionMark from './questionMark.jpg';\r\nimport * as storage from '../../Helpers/storage';\r\nimport User from '../../Types/User';\r\n\r\ninterface IProps {\r\n    changeView: (view: string) => void\r\n}\r\n\r\ninterface IState {\r\n    email: string;\r\n}\r\n\r\nclass Startscreen extends React.Component<IProps, IState> {\r\n    state: IState = { email: '' };\r\n    users: User[] = storage.getUsers();\r\n    lastUser: string = '';\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ email: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n        let match = false;\r\n        if (this.users) {console.log('users: ', this.users)\r\n            this.users.forEach(element => {console.log('elem: ', element, \"  state: \", this.state)\r\n                if (element.email === this.state.email) {\r\n                    match = true\r\n                }\r\n            });\r\n        }\r\n        if (match) {\r\n            this.props.changeView('List');\r\n        } else {\r\n            this.props.changeView('Register')\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let lastUser = storage.popUser();\r\n        let image;\r\n        if (lastUser && lastUser.imagePreviewUrl) {\r\n            image = (\r\n                <div>\r\n                    <img src={lastUser.imagePreviewUrl} alt=\"last user\" height=\"30%\" width=\"30%\" />\r\n                    <p>{lastUser.name}</p>\r\n                </div>\r\n            );\r\n        } else {\r\n            image = (<img src={questionMark} alt=\"logo\" height=\"30%\" width=\"30%\" />)\r\n        }\r\n        return (\r\n            <div className=\"Login\">\r\n                {image}\r\n                <form className=\"Form\" onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" name=\"email\" placeholder=\"Email Address\" value={this.state.email} onChange={this.handleChange} />\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Startscreen;\r\n","import React from 'react';\r\nimport './Register.css';\r\nimport addProfilePic from './addProfilePic.png';\r\nimport * as validator from '../../Helpers/validator'\r\nimport * as storage from '../../Helpers/storage';\r\n\r\ninterface IProps {\r\n    changeView: (view: string) => void;\r\n}\r\n\r\ninterface IState {\r\n    picture: File,\r\n    name: string,\r\n    email: string,\r\n    phone: string,\r\n    address: string,\r\n    birthdate: string,\r\n    imagePreviewUrl: any;\r\n}\r\n\r\nclass RegisterScreen extends React.Component<IProps, IState> {\r\n    state: IState = {\r\n        picture: new File([], 'filename'),\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        address: '',\r\n        birthdate: '',\r\n        imagePreviewUrl: ''\r\n    };\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleImageChange = this.handleImageChange.bind(this);\r\n    }\r\n\r\n    handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        event.preventDefault();\r\n        let reader = new FileReader();\r\n\r\n        if (event.target.files && event.target.files[0]) {\r\n            let file = event.target.files[0];\r\n\r\n            reader.onloadend = () => {\r\n                this.setState({\r\n                    ...this.state,\r\n                    picture: file,\r\n                    imagePreviewUrl: reader.result\r\n                })\r\n            }\r\n            reader.readAsDataURL(file)\r\n        } else {\r\n            alert('File is not valid. Please try again.');\r\n        }\r\n    }\r\n\r\n    handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            ...this.state,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n        if (validator.hasEmptyAttribute(this.state)) {\r\n            alert('Please fill in each field.')\r\n        } else {\r\n            storage.pushUser(this.state)\r\n            this.props.changeView('List')\r\n        }\r\n    }\r\n    render() {\r\n        let imagePreview;\r\n        if (this.state.imagePreviewUrl) {\r\n            imagePreview = (<img src={this.state.imagePreviewUrl} alt=\"uploaded\" height=\"30%\" width=\"30%\" />);\r\n        } else {\r\n            imagePreview = (<img src={addProfilePic} alt=\"logo\" height=\"30%\" width=\"30%\" />)\r\n        }\r\n        return (\r\n            <div className=\"Register\">\r\n                {imagePreview}\r\n                <form className=\"Form\" onSubmit={this.handleSubmit}>\r\n                    <input type='file' onChange={this.handleImageChange} />\r\n                    <input type=\"text\" name=\"name\" placeholder=\"Name\" value={this.state.name} onChange={this.handleChange} />\r\n                    <input type=\"text\" name=\"email\" placeholder=\"Email Address\" value={this.state.email} onChange={this.handleChange} />\r\n                    <input type=\"text\" pattern='\\d*' name=\"phone\" placeholder=\"Phone Number\" value={this.state.phone} onChange={this.handleChange} />\r\n                    <input type=\"text\" name=\"address\" placeholder=\"Address\" value={this.state.address} onChange={this.handleChange} />\r\n                    <input type=\"text\" name=\"birthdate\" placeholder=\"Date of Birth\" value={this.state.birthdate} onChange={this.handleChange} />\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RegisterScreen;\r\n","import User from \"../Types/User\"\r\n\r\n\r\nexport const hasEmptyAttribute = (user: User) => {\r\n    //user.picture.size\r\n    if (user.picture.name === 'filename')\r\n        return true\r\n    if (!user.name)\r\n        return true\r\n    if (!user.email)\r\n        return true\r\n    if (!user.phone)\r\n        return true\r\n    if (!user.birthdate)\r\n        return true\r\n    return false\r\n}","import React from 'react';\r\nimport './List.css';\r\nimport * as storage from '../../Helpers/storage';\r\nimport User from '../../Types/User';\r\n\r\ninterface IProps {\r\n    changeView: (view: string) => void;\r\n}\r\n\r\ninterface IState {}\r\n\r\nclass List extends React.Component<IProps, IState> {\r\n    userStack: User[] = storage.getUsers();\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n    }\r\n\r\n    handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    }\r\n\r\n    handleDelete(event: React.FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n    }\r\n    render() {\r\n        let topUser: User = this.userStack[0];\r\n        let userList: any[] = [];\r\n        this.userStack.map((user) => {\r\n            userList.push(\r\n                <div style={{border: \"black solid 1px\", width: \"70%\"}}>\r\n                    <p>{user.name}</p>\r\n                    <img src={user.imagePreviewUrl} alt=\"user icon\" height=\"10%\" width=\"10%\" />\r\n                </div>\r\n            )\r\n        })\r\n        return (\r\n            <div className=\"List\">\r\n                <img src={topUser.imagePreviewUrl} alt=\"top user\" height=\"30%\" width=\"30%\" />\r\n                <p>{topUser.email}</p>\r\n                <p>{topUser.phone}</p>\r\n                <p>{topUser.address}</p>\r\n                <p>{topUser.birthdate}</p>\r\n\r\n                <hr style={{color: \"black\", backgroundColor: \"black\", height: 1}}/>\r\n                <div style={{display: \"flex\", flexDirection: \"column\", alignItems: \"center\"}}>\r\n                    {userList}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List;\r\n","import React from 'react';\nimport Startscreen from './Views/Login/Login';\nimport RegisterScreen from './Views/Register/Register';\nimport ListScreen from './Views/List/List';\n\ninterface IProps { }\n\ninterface IState {\n    view: string;\n}\n\nclass Navigator extends React.Component<IProps, IState> {\n    state: IState = { view: 'Start' };\n\n    changeView = (view: string) => {\n        this.setState({\n            view: view\n        });\n    }\n\n    render() {\n        switch (this.state.view) {\n            case 'Start':\n                return (\n                    <Startscreen changeView={this.changeView.bind(this)} />\n                );\n            case 'Register':\n                return (\n                    <RegisterScreen changeView={this.changeView.bind(this)} />\n                );\n            case 'List':\n                return (\n                    <ListScreen changeView={this.changeView.bind(this)} />\n                );\n        }\n    }\n}\n\nexport default Navigator;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Navigator from './Navigator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Navigator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}